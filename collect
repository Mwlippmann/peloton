#!/usr/bin/env python3
import os
import requests
import json
from datetime import datetime
from pelotondatabase import *
from filter_tables import *

#making sure the relevant environment variables are set.
if 'USER' not in os.environ or 'PELOTONPASS' not in os.environ:
    print('you need to set the USER and PELOTONPASS environment variables')
    exit()

# first we log into the peloton api site and create an HTTPS session.
api_url = 'https://api.onepeloton.com/api/'
s = requests.Session()
payload = {'username_or_email': os.environ['USER'], 'password': os.environ['PELOTONPASS'] }
s.post('https://api.onepeloton.com/auth/login', json=payload)

# We check if the userid is already in the database. 
# If it's not, we collect it. 
if not get_my_user_id():
    # We create the api url and pull from it.
    my_api = 'me'
    my_info = s.get(api_url + my_api)
    userdata = json.loads(my_info.content.decode('UTF-8'))
    # We use the filter to filter out rows we don't yet have columns
    # for in the database.
    # Also, we make sure the date numbers are converted to datetime objects.
    user_dict = filter_data(userdata, user_filter)
    # we add an entry for the user entry that's actually you so it's easy to filter.
    user_dict['is_me'] = True
    # We insert it all into the database and get the user_id back.
    # the insert_user will create the database and everything if needed.
    my_id = insert_user(user_dict)
else: 
    # If it is in the database, we get the userid and move on.
    my_id = get_my_user_id()


# With the user id, we can collect ride information.
data = s.get(api_url + 'user/' + my_id + '/workouts?limit=2000')
parsed = json.loads(data.content.decode('UTF-8'))
workouts = parsed['data']
filtered_workouts = []
# here again we filter that came back from api, and insert it into the db.
for workout in workouts:
    filtered_workout = filter_data(workout, workout_filter)
    filtered_workouts.append(filtered_workout)
upsert(filtered_workouts,'workout')

# With the user id, we can collect information about who we are following.
first_data = s.get(api_url + 'user/' + my_id + '/following')
parsed = json.loads(first_data.content.decode('UTF-8'))
following = parsed['data']
page_count = parsed['page_count']
if page_count > 1:
    for i in range(1,page_count):
        data = s.get(api_url + 'user/' + my_id + '/following?page=' + str(i))
        parsed = json.loads(data.content.decode('UTF-8'))
        following.extend(parsed['data'])
filtered_followed = []
for followed in following:
    filtered_following = filter_data(followed, following_filter)
    filtered_following['user_id'] = my_id
    filtered_followed.append(filtered_following)
upsert(filtered_followed,'following')

# here we get all the workout ids from the database,
# these will be used to get all the rides and stuff.
workout_ids = get_workoutids(my_id)
    
for workout_id in workout_ids:
    full_workout = s.get(api_url + 'workout/' + workout_id)
    parsed = json.loads(full_workout.content.decode('UTF-8'))
    rides = []
    if 'ride' in parsed:
        ride = parsed.pop('ride')
        ride['workout_id'] = parsed['id']
        filtered_ride = filter_data(ride, ride_filter)
        rides.append(filtered_ride)
    filtered_workout = filter_data(parsed, workout_filter)
    upsert([filtered_workout],'workout')
    upsert(rides,'ride')

